import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool

import javax.xml.bind.JAXB

buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath 'org.jooq:jooq-codegen:3.6.2'
        classpath 'mysql:mysql-connector-java:5.1.36'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'forge'
apply plugin: 'com.github.johnrengelman.shadow'

version = "1.0.0"
group = "com.skcraft.plume"
archivesBaseName = "plume"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://maven.sk89q.com/repo/" }
    maven { url "http://maven.cil.li/" }
}

dependencies {
    // Core libraries
    compile 'com.google.guava:guava:18.0' // Library of assorted things
    compile 'com.google.code.findbugs:jsr305:3.0.0' // @Nullable
    compile 'com.google.inject:guice:4.0' // Dependency injection
    compile 'org.javatuples:javatuples:1.2' // Tuples (2+)
    compile "org.atteo.classindex:classindex:3.3" // Builds index of classes with selected @Annotations
    compile 'org.projectlombok:lombok:1.12.2' // @Getter @Setter etc.
    compile 'org.mapdb:mapdb:2.0-beta5' // Used to persist the block logger queue on save failure
    compile 'net.sf.trove4j:trove4j:3.0.3' // Collections, notably used for chunk claims
    compile 'ninja.leaping.configurate:configurate-hocon:2.0'
    compile 'com.sk89q.intake:intake:4.1-SNAPSHOT' // Command registration library
    compile 'com.sk89q:squirrelid:0.1.0' // Mojang name -> UUID
    compile 'joda-time:joda-time:2.8.2' // Time library; used for period matcher not found in Java 8+
    compile 'com.googlecode.json-simple:json-simple:1.1.1' // JSON parsing and emitting
    compile 'org.beanshell:bsh:2.0b5' // BeanShell REPL
    compile 'io.dropwizard.metrics:metrics-core:3.1.0' // Metrics
    compile 'io.dropwizard.metrics:metrics-graphite:3.1.0' // Metrics + Graphite

    // SQL and JDBC
    compile 'org.jooq:jooq:3.6.2' // SQL DSL
    compile 'org.modelmapper:modelmapper:0.7.4' // Used to map jOOQ records -> objects
    compile 'org.modelmapper.extensions:modelmapper-jooq:0.7.4'
    compile 'com.zaxxer:HikariCP:2.4.0' // JDBC connection pool
    runtime 'mysql:mysql-connector-java:5.1.36' // MySQL driver

    // Mods
    compile 'com.sk89q.worldedit:worldedit-forge-mc1.7.10:6.1.1-SNAPSHOT:dev' // Selection API
    compile 'li.cil.oc:OpenComputers:MC1.7.10-1.5.15.720-dev:api' // Robot hooks

    // Tests
    testCompile('junit:junit:4.12') {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'uk.co.modular-it:hamcrest-date:0.9.5'
    testCompile 'org.dbunit:dbunit:2.5.1'
    testRuntime 'org.slf4j:slf4j-log4j12:1.7.12'
}

minecraft {
    ext.forgeVersion = "10.13.4.1492-1.7.10"
    version = "1.7.10-$forgeVersion"

    replaceIn "com/skcraft/plume/Plume.java"
    replace "%VERSION%", project.version
}

project.archivesBaseName = "${project.archivesBaseName}-mc${minecraft.version}"

processResources {
    from (sourceSets.main.resources.srcDirs) {
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeVersion': project.minecraft.forgeVersion
        include 'mcmod.info'
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    // Java 8 turns on doclint which we fail
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'plume_at.cfg'
        attributes 'FMLCorePlugin': 'com.skcraft.plume.asm.PlumePlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
    dependencies {
        include(dependency('org.slf4j:slf4j-api:.*'))
        include(dependency('com.zaxxer:HikariCP:.*'))
        include(dependency('aopalliance:aopalliance:.*'))
        include(dependency('javax.inject:javax.inject:.*'))
        include(dependency('com.google.inject:guice:.*'))
        include(dependency('org.javatuples:javatuples:.*'))
        include(dependency('org.atteo.classindex:classindex:.*'))
        include(dependency('org.mapdb:mapdb:.*'))
        include(dependency('net.sf.trove4j:trove4j:.*'))
        include(dependency('ninja.leaping.configurate:configurate-core:.*'))
        include(dependency('ninja.leaping.configurate:configurate-hocon:.*'))
        include(dependency('com.sk89q.intake:intake:.*'))
        include(dependency('com.sk89q:squirrelid:.*'))
        include(dependency('joda-time:joda-time:.*'))
        include(dependency('com.googlecode.json-simple:json-simple:.*'))
        include(dependency('org.jooq:jooq:.*'))
        include(dependency('org.modelmapper:modelmapper:.*'))
        include(dependency('org.modelmapper.extensions:modelmapper-jooq:.*'))
        include(dependency('com.zaxxer:HikariCP:.*'))
        include(dependency('org.beanshell:bsh:.*'))
        include(dependency('io.dropwizard.metrics:.*'))

        relocate 'com.sk89q.intake', 'com.skcraft.plume.internal.intake'
        relocate 'com.google.inject', 'com.skcraft.plume.internal.inject'
        relocate 'com.sk89q.squirrelid', 'com.skcraft.plume.internal.squirrelid'
        relocate 'com.zaxxer.hikari', 'com.skcraft.plume.internal.hikari'
        relocate 'org.joda.time', 'com.skcraft.plume.internal.joda'
        relocate 'gnu.trove4j', 'com.skcraft.plume.internal.trove4j'
        relocate 'ninja.leaping.configurate', 'com.skcraft.plume.internal.configurate'
        relocate 'org.atteo', 'com.skcraft.plume.internal.classindex'
        relocate 'org.mapdb', 'com.skcraft.plume.internal.mapdb'
        relocate 'org.modelmapper', 'com.skcraft.plume.internal.modelmapper'
    }
}

reobf.reobf(shadowJar) { spec ->
    spec.classpath = sourceSets.main.compileClasspath;
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task('generateSchema') << {
    def writer = new StringWriter()

    new MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {
        jdbc() {
            driver('com.mysql.jdbc.Driver')
            url('jdbc:mysql://localhost:3306')
            user('plume_dev')
            password('plume_dev')
        }
        generator() {
            database() {
                name('org.jooq.util.mysql.MySQLDatabase')
                unsignedTypes("false")
                schemata {
                    schema {
                        inputSchema("plume_data")
                        outputSchema("data")
                    }

                    schema {
                        inputSchema("plume_log")
                        outputSchema("log")
                    }
                }
            }
            target() {
                packageName('com.skcraft.plume.common.service.sql.model')
                directory('src/main/java')
            }
        }
    }

    GenerationTool.generate(JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class))
}

build.dependsOn(shadowJar)
